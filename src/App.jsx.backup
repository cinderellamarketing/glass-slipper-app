import React, { useState, useRef, useEffect, useCallback } from 'react';
import { Mail, Lock, Eye, EyeOff, ArrowRight, Sparkles, Shield, Users, Upload, Target, UserCheck, Building, BarChart3, Calendar, Settings, CheckCircle, User, Briefcase, Plus, TrendingUp, Zap, Menu, FileText, LogOut } from 'lucide-react';

// Storage version for backwards compatibility
const STORAGE_VERSION = '1.0';

// Storage keys
const STORAGE_KEYS = {
  USER_DATA: 'glassSlipperUserData',
  CONTACTS: 'glassSlipperContacts',
  CATEGORIES: 'glassSlipperCategories',
  TASKS: 'glassSlipperTasks',
  SETTINGS: 'glassSlipperSettings',
  VERSION: 'glassSlipperVersion'
};

// LinkedIn Formula AI Client - Powered by Claude API
class LinkedInFormulaAI {
  constructor() {
    this.apiKey = import.meta.env.VITE_CLAUDE_API_KEY;
    this.baseURL = 'https://api.anthropic.com/v1/messages';
    this.model = 'claude-3-sonnet-20240229';
    
    // LinkedIn Formula Knowledge Base (from Adam Houlahan's book)
    this.linkedinFormula = {
      coreProcess: [
        "① Define your one offer",
        "② Create your value proposition",
        "③ Build your Ideal Customer Profile",
        "④ Do some customer interviews",
        "⑤ Discover your style",
        "⑥ Shoot some content",
        "⑦ Write your profile",
        "⑧ Build the strategy",
        "⑨ Start implementing it",
        "⑩ Constantly review"
      ],
      contentStrategy: {
        funnelSplit: "3 Awareness + 2 Interest + 1 Decision + 1 Action posts per week",
        philosophy: "Content moves people through funnel: Awareness → Interest → Decision → Action",
        simpleApproach: [
          "The problem you solve",
          "The results people get from working with you",
          "How people can work with you",
          "Who you are"
        ],
        contentTypes: [
          "Education - show expertise and solve problems",
          "Storytelling - case studies with emotional connection",
          "Personal - build relationships and show personality",
          "Expertise - demonstrate knowledge and give advice",
          "Sales - clear offers with strong call-to-action"
        ]
      },
      engagementPrinciples: [
        "Quality over quantity - meaningful relationships with right people",
        "Value-first approach with soft pitch, content-driven outreach",
        "Profile as landing page designed to convert viewers into connections",
        "Track quality metrics: profile views from ideal customers, reply rates, meetings booked"
      ],
      oneThingStrategy: "Be known for one specific thing rather than everything - just because you promote one thing doesn't mean you lose everything else",
      messagingApproach: "Appreciate connecting + value delivery + soft CTA, avoid spam-like automation"
    };
  }

  async callClaude(prompt) {
    if (!this.apiKey) {
      throw new Error('Claude API key not configured. Please add VITE_CLAUDE_API_KEY to your environment variables.');
    }

    try {
      const response = await fetch(this.baseURL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': this.apiKey,
          'anthropic-version': '2023-06-01'
        },
        body: JSON.stringify({
          model: this.model,
          max_tokens: 1000,
          messages: [{
            role: 'user',
            content: prompt
          }]
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      return data.content[0].text;
    } catch (error) {
      console.error('Claude API Error:', error);
      throw error;
    }
  }

  async categoriseContact(contact, businessContext) {
    const prompt = `
Based on the LinkedIn Formula methodology and the following business context, categorise this LinkedIn contact and provide strategic insights.

BUSINESS CONTEXT:
${businessContext}

CONTACT DETAILS:
Name: ${contact.firstName} ${contact.lastName}
Company: ${contact.company}
Position: ${contact.position}
Industry: ${contact.industry || 'Not specified'}
Location: ${contact.location || 'Not specified'}

LINKEDIN FORMULA CATEGORIES:
1. Hot Prospect - Perfect fit for your offer, high potential value
2. Warm Lead - Good fit, moderate potential, needs nurturing
3. Future Opportunity - Not ready now but could be valuable later
4. Network Contact - Valuable for connections and referrals
5. No Match - Not suitable for your business objectives

Please respond with ONLY a JSON object in this exact format:
{
  "category": "Hot Prospect|Warm Lead|Future Opportunity|Network Contact|No Match",
  "confidence": 85,
  "reasoning": "Brief explanation of why this contact fits this category",
  "nextAction": "Specific recommended action based on LinkedIn Formula principles",
  "contentStrategy": "Type of content that would resonate with this contact",
  "connectionValue": "How this contact could contribute to your LinkedIn strategy"
}`;

    try {
      const response = await this.callClaude(prompt);
      return JSON.parse(response);
    } catch (error) {
      console.error('Contact categorisation failed:', error);
      return {
        category: 'Network Contact',
        confidence: 50,
        reasoning: 'Automatic fallback due to categorisation error',
        nextAction: 'Review manually when system is available',
        contentStrategy: 'General professional content',
        connectionValue: 'Potential network expansion'
      };
    }
  }

  async generateOutreachMessage(contact, userProfile, messageType = 'connection') {
    const contextPrompt = `
Using LinkedIn Formula principles, generate a personalised outreach message.

USER PROFILE:
Company: ${userProfile.company}
Business: ${userProfile.businessType}
Value Proposition: ${userProfile.goals}

CONTACT:
Name: ${contact.firstName} ${contact.lastName}
Company: ${contact.company}
Position: ${contact.position}
Category: ${contact.category}

MESSAGE TYPE: ${messageType}

LINKEDIN FORMULA PRINCIPLES:
- Value-first approach
- Soft pitch, content-driven
- Appreciate connecting + value delivery + soft CTA
- Avoid spam-like automation
- Focus on building genuine relationships

Generate a natural, personalised message that follows these principles.
Max 150 words for connection requests, 200 words for follow-ups.

Respond with ONLY a JSON object:
{
  "message": "The complete message text",
  "subject": "Subject line if applicable",
  "callToAction": "Specific next step being requested"
}`;

    try {
      const response = await this.callClaude(contextPrompt);
      return JSON.parse(response);
    } catch (error) {
      console.error('Message generation failed:', error);
      return {
        message: `Hi ${contact.firstName}, I noticed your work at ${contact.company} and would love to connect. I believe there might be some valuable synergies between our businesses.`,
        subject: 'Connection Request',
        callToAction: 'Accept connection request'
      };
    }
  }

  async generateContentStrategy(userProfile, contacts) {
    const prompt = `
Based on LinkedIn Formula methodology, create a content strategy for this user.

USER PROFILE:
${JSON.stringify(userProfile, null, 2)}

CONTACT CATEGORIES SUMMARY:
${this.generateContactSummary(contacts)}

LINKEDIN FORMULA REQUIREMENTS:
- Content funnel: 3 Awareness + 2 Interest + 1 Decision + 1 Action posts per week
- Content types: Education, Storytelling, Personal, Expertise, Sales
- Focus on one core offer/message
- Build profile as landing page

Generate a strategic content plan with specific post ideas.

Respond with ONLY a JSON object:
{
  "weeklyPlan": [
    {
      "day": "Monday",
      "type": "Awareness",
      "topic": "Specific post topic",
      "content": "Detailed post content"
    }
  ],
  "coreMessage": "Your one thing focus",
  "targetAudience": "Primary audience description",
  "valueProposition": "Clear value statement"
}`;

    try {
      const response = await this.callClaude(prompt);
      return JSON.parse(response);
    } catch (error) {
      console.error('Content strategy generation failed:', error);
      return {
        weeklyPlan: [],
        coreMessage: "Your unique business value",
        targetAudience: "Your ideal customers",
        valueProposition: "The specific problem you solve"
      };
    }
  }

  generateContactSummary(contacts) {
    const categoryCounts = contacts.reduce((acc, contact) => {
      acc[contact.category || 'Uncategorised'] = (acc[contact.category || 'Uncategorised'] || 0) + 1;
      return acc;
    }, {});
    
    return Object.entries(categoryCounts)
      .map(([category, count]) => `${category}: ${count}`)
      .join(', ');
  }
}

// Storage management utility
const StorageManager = {
  save: (key, data) => {
    try {
      const serialized = JSON.stringify({
        data,
        timestamp: new Date().toISOString(),
        version: STORAGE_VERSION
      });
      localStorage.setItem(key, serialized);
      return true;
    } catch (error) {
      console.error(`Failed to save ${key}:`, error);
      return false;
    }
  },

  load: (key, defaultValue = null) => {
    try {
      const item = localStorage.getItem(key);
      if (!item) return defaultValue;
      
      const parsed = JSON.parse(item);
      
      // Check version compatibility
      if (parsed.version !== STORAGE_VERSION) {
        console.warn(`Storage version mismatch for ${key}. Expected ${STORAGE_VERSION}, got ${parsed.version}`);
        return defaultValue;
      }
      
      return restoreDates(parsed.data);
    } catch (error) {
      console.error(`Failed to load ${key}:`, error);
      return defaultValue;
    }
  },

  remove: (key) => {
    try {
      localStorage.removeItem(key);
      return true;
    } catch (error) {
      console.error(`Failed to remove ${key}:`, error);
      return false;
    }
  },

  clear: () => {
    try {
      Object.values(STORAGE_KEYS).forEach(key => {
        localStorage.removeItem(key);
      });
      return true;
    } catch (error) {
      console.error('Failed to clear storage:', error);
      return false;
    }
  },

  getStorageInfo: () => {
    try {
      const breakdown = {};
      let totalSize = 0;
      
      Object.entries(STORAGE_KEYS).forEach(([name, key]) => {
        const item = localStorage.getItem(key);
        const size = item ? new Blob([item]).size : 0;
        breakdown[name] = size;
        totalSize += size;
      });
      
      return {
        isAvailable: true,
        totalSize,
        breakdown,
        totalSizeKB: Math.round(totalSize / 1024),
        maxSize: 5 * 1024 * 1024, // 5MB typical limit
        version: STORAGE_VERSION
      };
    } catch (error) {
      console.error('Failed to get storage info:', error);
      return { isAvailable: false, error: error.message };
    }
  }
};

// Helper function to restore Date objects from JSON
const restoreDates = (obj) => {
  const dateFields = ['createdAt', 'lastLogin', 'lastContactDate', 'nextFollowUpDate'];
  
  if (Array.isArray(obj)) {
    return obj.map(item => restoreDates(item));
  }
  
  if (obj && typeof obj === 'object') {
    const restored = { ...obj };
    
    dateFields.forEach(field => {
      if (restored[field] && typeof restored[field] === 'string') {
        const date = new Date(restored[field]);
        if (!isNaN(date.getTime())) {
          restored[field] = date;
        }
      }
    });
    
    // Handle nested objects
    Object.keys(restored).forEach(key => {
      if (restored[key] && typeof restored[key] === 'object' && !restored[key] instanceof Date) {
        restored[key] = restoreDates(restored[key]);
      }
    });
    
    return restored;
  }
  
  return obj;
};

// Debounced save function to prevent too frequent localStorage writes
const useDebounceCallback = (callback, delay) => {
  const timeoutRef = useRef(null);
  
  return useCallback((...args) => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
    
    timeoutRef.current = setTimeout(() => {
      callback(...args);
    }, delay);
  }, [callback, delay]);
};

const GlassSlipperApp = () => {
  // Authentication state
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [authView, setAuthView] = useState('signin');
  
  // Initialize LinkedIn Formula AI client
  const [linkedinAI] = useState(() => new LinkedInFormulaAI());
  
  // Check authentication on app load
  useEffect(() => {
    const savedUser = StorageManager.load(STORAGE_KEYS.USER_DATA);
    if (savedUser && savedUser.email) {
      setCurrentUser(savedUser);
      setIsAuthenticated(true);
    }
  }, []);

  // Landing page component
  const LandingPage = () => {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-purple-800 to-indigo-900">
        {/* Hero Section */}
        <div className="relative overflow-hidden">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
            <div className="text-center">
              <div className="flex justify-center mb-6">
                <div className="bg-white bg-opacity-10 p-4 rounded-full">
                  <Sparkles className="w-12 h-12 text-yellow-400" />
                </div>
              </div>
              <h1 className="text-5xl md:text-7xl font-bold text-white mb-6">
                Glass <span className="text-yellow-400">Slipper</span>
              </h1>
              <p className="text-xl md:text-2xl text-white text-opacity-90 mb-8 max-w-3xl mx-auto">
                Transform your LinkedIn connections into qualified prospects with AI-powered ABM intelligence
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center mb-12">
                <button
                  onClick={() => setAuthView('signup')}
                  className="bg-gradient-to-r from-yellow-400 to-orange-500 text-black px-8 py-4 rounded-xl font-bold text-lg hover:from-yellow-300 hover:to-orange-400 transition-all transform hover:scale-105 flex items-center justify-center space-x-2"
                >
                  <span>Start Free Trial</span>
                  <ArrowRight className="w-6 h-6" />
                </button>
                <button
                  onClick={() => setAuthView('signin')}
                  className="bg-white bg-opacity-10 backdrop-blur text-white px-8 py-4 rounded-xl font-semibold text-lg hover:bg-opacity-20 transition-all border border-white border-opacity-20 flex items-center justify-center space-x-2"
                >
                  <span>Sign In</span>
                  <User className="w-6 h-6" />
                </button>
              </div>
            </div>

            {/* Features Grid */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mt-20">
              <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-8 text-center">
                <Target className="w-12 h-12 text-yellow-400 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-white mb-3">AI Contact Categorisation</h3>
                <p className="text-white text-opacity-70">
                  Automatically categorise LinkedIn contacts into Hot Prospects, Warm Leads, and Future Opportunities using advanced AI
                </p>
              </div>
              
              <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-8 text-center">
                <Users className="w-12 h-12 text-purple-400 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-white mb-3">LinkedIn Formula Integration</h3>
                <p className="text-white text-opacity-70">
                  Built on Adam Houlahan's proven LinkedIn Formula methodology for systematic relationship building
                </p>
              </div>
              
              <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-8 text-center">
                <BarChart3 className="w-12 h-12 text-green-400 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-white mb-3">Content Strategy Engine</h3>
                <p className="text-white text-opacity-70">
                  Generate personalised content strategies that move prospects through your sales funnel
                </p>
              </div>
            </div>

            {/* Social Proof */}
            <div className="mt-20 text-center">
              <p className="text-white text-opacity-60 text-sm mb-8">Trusted by sales professionals and business owners</p>
              <div className="flex justify-center items-center space-x-8 opacity-60">
                <div className="bg-white bg-opacity-10 px-6 py-3 rounded-lg">
                  <span className="text-white font-semibold">250+ Users</span>
                </div>
                <div className="bg-white bg-opacity-10 px-6 py-3 rounded-lg">
                  <span className="text-white font-semibold">50K+ Contacts Processed</span>
                </div>
                <div className="bg-white bg-opacity-10 px-6 py-3 rounded-lg">
                  <span className="text-white font-semibold">85% Accuracy Rate</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Sign in page component
  const SignInPage = () => {
    const [formData, setFormData] = useState({
      email: '',
      password: ''
    });
    const [showPassword, setShowPassword] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');

    const handleInputChange = (field, value) => {
      setFormData(prev => ({ ...prev, [field]: value }));
      if (error) setError('');
    };

    const handleSubmit = async (e) => {
      e.preventDefault();
      setIsLoading(true);
      setError('');

      try {
        // Simulate authentication delay
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        // For demo purposes, any email/password combo works
        if (formData.email && formData.password) {
          const userData = {
            email: formData.email,
            name: formData.email.split('@')[0],
            lastLogin: new Date().toISOString(),
            company: 'Demo Company',
            businessType: 'Sales Professional'
          };
          
          StorageManager.save(STORAGE_KEYS.USER_DATA, userData);
          setCurrentUser(userData);
          setIsAuthenticated(true);
        } else {
          setError('Please enter both email and password');
        }
      } catch (err) {
        setError('Sign in failed. Please try again.');
      } finally {
        setIsLoading(false);
      }
    };

    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-purple-800 to-indigo-900 flex items-center justify-center px-4">
        <div className="max-w-md w-full">
          <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-8">
            <div className="text-center mb-8">
              <div className="flex justify-center mb-4">
                <div className="bg-white bg-opacity-10 p-3 rounded-full">
                  <Sparkles className="w-8 h-8 text-yellow-400" />
                </div>
              </div>
              <h2 className="text-3xl font-bold text-white mb-2">Welcome Back</h2>
              <p className="text-white text-opacity-70">Sign in to your Glass Slipper account</p>
            </div>

            <form onSubmit={handleSubmit} className="space-y-6">
              {error && (
                <div className="bg-red-500 bg-opacity-20 border border-red-500 text-red-200 px-4 py-3 rounded-lg">
                  {error}
                </div>
              )}

              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Email Address
                </label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white text-opacity-50 w-5 h-5" />
                  <input
                    type="email"
                    value={formData.email}
                    onChange={(e) => handleInputChange('email', e.target.value)}
                    className="w-full pl-12 pr-4 py-3 bg-white bg-opacity-10 backdrop-blur border border-white border-opacity-20 rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:border-transparent"
                    placeholder="Enter your email"
                    required
                  />
                </div>
              </div>

              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Password
                </label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white text-opacity-50 w-5 h-5" />
                  <input
                    type={showPassword ? "text" : "password"}
                    value={formData.password}
                    onChange={(e) => handleInputChange('password', e.target.value)}
                    className="w-full pl-12 pr-12 py-3 bg-white bg-opacity-10 backdrop-blur border border-white border-opacity-20 rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:border-transparent"
                    placeholder="Enter your password"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-white text-opacity-50 hover:text-opacity-70"
                  >
                    {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                  </button>
                </div>
              </div>

              <button
                type="submit"
                disabled={isLoading}
                className="w-full bg-gradient-to-r from-yellow-400 to-orange-500 text-black py-3 rounded-lg font-semibold hover:from-yellow-300 hover:to-orange-400 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
              >
                {isLoading ? (
                  <>
                    <div className="w-5 h-5 border-2 border-purple-900 border-t-transparent rounded-full animate-spin"></div>
                    <span>Signing in...</span>
                  </>
                ) : (
                  <>
                    <span>Sign In</span>
                    <ArrowRight className="w-5 h-5" />
                  </>
                )}
              </button>
            </form>

            <div className="mt-8 text-center">
              <p className="text-white text-opacity-70 text-sm">
                Don't have an account?{' '}
                <button
                  onClick={() => setAuthView('signup')}
                  className="text-yellow-300 hover:text-yellow-200 font-medium transition-colors"
                >
                  Sign up here
                </button>
              </p>
            </div>

            <div className="mt-6 pt-6 border-t border-white border-opacity-20 text-center">
              <p className="text-white text-opacity-50 text-xs">
                Glass Slipper v1.0 Beta • LinkedIn ABM Intelligence
              </p>
            </div>
          </div>

          <div className="mt-6 text-center">
            <div className="inline-flex items-center space-x-2 px-4 py-2 bg-white bg-opacity-10 rounded-full">
              <Shield className="w-4 h-4 text-green-400" />
              <span className="text-white text-opacity-70 text-sm">256-bit SSL encrypted</span>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Sign up page component
  const SignUpPage = () => {
    const [formData, setFormData] = useState({
      firstName: '',
      lastName: '',
      email: '',
      password: '',
      confirmPassword: '',
      company: '',
      businessType: ''
    });
    const [showPassword, setShowPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [errors, setErrors] = useState({});
    const [signupStatus, setSignupStatus] = useState('');

    // Handle input changes
    const handleInputChange = (field, value) => {
      setFormData(prev => ({ ...prev, [field]: value }));
      if (errors[field]) {
        setErrors(prev => ({ ...prev, [field]: '' }));
      }
    };

    // Validate form
    const validateForm = () => {
      const newErrors = {};

      // Name validation
      if (!formData.firstName.trim()) {
        newErrors.firstName = 'First name is required';
      }
      if (!formData.lastName.trim()) {
        newErrors.lastName = 'Last name is required';
      }

      // Email validation
      if (!formData.email) {
        newErrors.email = 'Email is required';
      } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
        newErrors.email = 'Please enter a valid email address';
      }

      // Password validation
      if (!formData.password) {
        newErrors.password = 'Password is required';
      } else if (formData.password.length < 6) {
        newErrors.password = 'Password must be at least 6 characters';
      }

      // Confirm password validation
      if (formData.password !== formData.confirmPassword) {
        newErrors.confirmPassword = 'Passwords do not match';
      }

      // Company validation
      if (!formData.company.trim()) {
        newErrors.company = 'Company name is required';
      }

      // Business type validation
      if (!formData.businessType) {
        newErrors.businessType = 'Please select your business type';
      }

      return newErrors;
    };

    // Handle form submission
    const handleSubmit = async (e) => {
      e.preventDefault();
      const formErrors = validateForm();

      if (Object.keys(formErrors).length > 0) {
        setErrors(formErrors);
        return;
      }

      setIsLoading(true);
      setSignupStatus('Creating your account...');

      try {
        // Simulate account creation delay
        await new Promise(resolve => setTimeout(resolve, 2000));

        const userData = {
          email: formData.email,
          name: `${formData.firstName} ${formData.lastName}`,
          firstName: formData.firstName,
          lastName: formData.lastName,
          company: formData.company,
          businessType: formData.businessType,
          createdAt: new Date().toISOString(),
          lastLogin: new Date().toISOString()
        };

        StorageManager.save(STORAGE_KEYS.USER_DATA, userData);
        setCurrentUser(userData);
        setSignupStatus('Account created successfully!');

        // Brief delay to show success message
        setTimeout(() => {
          setIsAuthenticated(true);
        }, 1000);

      } catch (error) {
        setErrors({ submit: 'Account creation failed. Please try again.' });
      } finally {
        setIsLoading(false);
      }
    };

    const businessTypes = [
      'Sales Professional',
      'Business Development',
      'Marketing Professional',
      'Consultant',
      'Business Owner',
      'Entrepreneur',
      'Real Estate Agent',
      'Financial Advisor',
      'Coach/Trainer',
      'Freelancer',
      'Other'
    ];

    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-purple-800 to-indigo-900 flex items-center justify-center px-4 py-8">
        <div className="max-w-md w-full">
          <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-8">
            <div className="text-center mb-8">
              <div className="flex justify-center mb-4">
                <div className="bg-white bg-opacity-10 p-3 rounded-full">
                  <UserCheck className="w-8 h-8 text-yellow-400" />
                </div>
              </div>
              <h2 className="text-3xl font-bold text-white mb-2">Create Account</h2>
              <p className="text-white text-opacity-70">Join Glass Slipper and transform your LinkedIn strategy</p>
            </div>

            <form onSubmit={handleSubmit} className="space-y-4">
              {errors.submit && (
                <div className="bg-red-500 bg-opacity-20 border border-red-500 text-red-200 px-4 py-3 rounded-lg">
                  {errors.submit}
                </div>
              )}

              {signupStatus && (
                <div className="bg-green-500 bg-opacity-20 border border-green-500 text-green-200 px-4 py-3 rounded-lg">
                  {signupStatus}
                </div>
              )}

              {/* Name Fields */}
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-white text-sm font-medium mb-2">
                    First Name
                  </label>
                  <input
                    type="text"
                    value={formData.firstName}
                    onChange={(e) => handleInputChange('firstName', e.target.value)}
                    className={`w-full px-4 py-3 bg-white bg-opacity-10 backdrop-blur border ${errors.firstName ? 'border-red-500' : 'border-white border-opacity-20'} rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:border-transparent`}
                    placeholder="First name"
                    required
                  />
                  {errors.firstName && (
                    <p className="text-red-400 text-xs mt-1">{errors.firstName}</p>
                  )}
                </div>

                <div>
                  <label className="block text-white text-sm font-medium mb-2">
                    Last Name
                  </label>
                  <input
                    type="text"
                    value={formData.lastName}
                    onChange={(e) => handleInputChange('lastName', e.target.value)}
                    className={`w-full px-4 py-3 bg-white bg-opacity-10 backdrop-blur border ${errors.lastName ? 'border-red-500' : 'border-white border-opacity-20'} rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:border-transparent`}
                    placeholder="Last name"
                    required
                  />
                  {errors.lastName && (
                    <p className="text-red-400 text-xs mt-1">{errors.lastName}</p>
                  )}
                </div>
              </div>

              {/* Email */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Email Address
                </label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white text-opacity-50 w-5 h-5" />
                  <input
                    type="email"
                    value={formData.email}
                    onChange={(e) => handleInputChange('email', e.target.value)}
                    className={`w-full pl-12 pr-4 py-3 bg-white bg-opacity-10 backdrop-blur border ${errors.email ? 'border-red-500' : 'border-white border-opacity-20'} rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:border-transparent`}
                    placeholder="Enter your email"
                    required
                  />
                </div>
                {errors.email && (
                  <p className="text-red-400 text-xs mt-1">{errors.email}</p>
                )}
              </div>

              {/* Password */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Password
                </label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white text-opacity-50 w-5 h-5" />
                  <input
                    type={showPassword ? "text" : "password"}
                    value={formData.password}
                    onChange={(e) => handleInputChange('password', e.target.value)}
                    className={`w-full pl-12 pr-12 py-3 bg-white bg-opacity-10 backdrop-blur border ${errors.password ? 'border-red-500' : 'border-white border-opacity-20'} rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:border-transparent`}
                    placeholder="Create a password"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-white text-opacity-50 hover:text-opacity-70"
                  >
                    {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                  </button>
                </div>
                {errors.password && (
                  <p className="text-red-400 text-xs mt-1">{errors.password}</p>
                )}
              </div>

              {/* Confirm Password */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Confirm Password
                </label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white text-opacity-50 w-5 h-5" />
                  <input
                    type={showConfirmPassword ? "text" : "password"}
                    value={formData.confirmPassword}
                    onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
                    className={`w-full pl-12 pr-12 py-3 bg-white bg-opacity-10 backdrop-blur border ${errors.confirmPassword ? 'border-red-500' : 'border-white border-opacity-20'} rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:border-transparent`}
                    placeholder="Confirm your password"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-white text-opacity-50 hover:text-opacity-70"
                  >
                    {showConfirmPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                  </button>
                </div>
                {errors.confirmPassword && (
                  <p className="text-red-400 text-xs mt-1">{errors.confirmPassword}</p>
                )}
              </div>

              {/* Company */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Company
                </label>
                <div className="relative">
                  <Building className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white text-opacity-50 w-5 h-5" />
                  <input
                    type="text"
                    value={formData.company}
                    onChange={(e) => handleInputChange('company', e.target.value)}
                    className={`w-full pl-12 pr-4 py-3 bg-white bg-opacity-10 backdrop-blur border ${errors.company ? 'border-red-500' : 'border-white border-opacity-20'} rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:border-transparent`}
                    placeholder="Your company name"
                    required
                  />
                </div>
                {errors.company && (
                  <p className="text-red-400 text-xs mt-1">{errors.company}</p>
                )}
              </div>

              {/* Business Type */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Business Type
                </label>
                <div className="relative">
                  <Briefcase className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white text-opacity-50 w-5 h-5" />
                  <select
                    value={formData.businessType}
                    onChange={(e) => handleInputChange('businessType', e.target.value)}
                    className={`w-full pl-12 pr-4 py-3 bg-white bg-opacity-10 backdrop-blur border ${errors.businessType ? 'border-red-500' : 'border-white border-opacity-20'} rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:border-transparent appearance-none`}
                    required
                  >
                    <option value="" className="bg-purple-900">Select your business type</option>
                    {businessTypes.map(type => (
                      <option key={type} value={type} className="bg-purple-900">{type}</option>
                    ))}
                  </select>
                </div>
                {errors.businessType && (
                  <p className="text-red-400 text-xs mt-1">{errors.businessType}</p>
                )}
              </div>

              <button
                type="submit"
                disabled={isLoading}
                className="w-full bg-gradient-to-r from-yellow-400 to-orange-500 text-black py-3 rounded-lg font-semibold hover:from-yellow-300 hover:to-orange-400 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
              >
                {isLoading ? (
                  <>
                    <div className="w-5 h-5 border-2 border-purple-900 border-t-transparent rounded-full animate-spin"></div>
                    <span>Creating Account...</span>
                  </>
                ) : (
                  <>
                    <span>Create Account</span>
                    <UserCheck className="w-5 h-5" />
                  </>
                )}
              </button>
            </form>

            <div className="mt-8 text-center">
              <p className="text-white text-opacity-70 text-sm">
                Already have an account?{' '}
                <button
                  onClick={() => setAuthView('signin')}
                  className="text-yellow-300 hover:text-yellow-200 font-medium transition-colors"
                >
                  Sign in here
                </button>
              </p>
            </div>

            <div className="mt-6 pt-6 border-t border-white border-opacity-20 text-center">
              <p className="text-white text-opacity-50 text-xs">
                By creating an account, you agree to our Terms of Service and Privacy Policy
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Admin panel component
  const AdminPanel = () => {
    // Mock data for admin dashboard
    const [allUsers] = useState([
      {
        id: 1,
        name: 'John Smith',
        email: 'john@example.com',
        company: 'Tech Solutions Ltd',
        contactsUploaded: 234,
        tasksCompleted: 45,
        lastActive: '2 hours ago',
        isActive: true
      },
      {
        id: 2,
        name: 'Sarah Johnson',
        email: 'sarah@consulting.com',
        company: 'Johnson Consulting',
        contactsUploaded: 156,
        tasksCompleted: 32,
        lastActive: '1 day ago',
        isActive: true
      },
      {
        id: 3,
        name: 'Mike Chen',
        email: 'mike@startup.io',
        company: 'Startup Inc',
        contactsUploaded: 89,
        tasksCompleted: 12,
        lastActive: '3 days ago',
        isActive: false
      }
    ]);

    const totalUsers = allUsers.length;
    const activeUsers = allUsers.filter(user => user.isActive).length;
    const totalContacts = allUsers.reduce((sum, user) => sum + user.contactsUploaded, 0);
    const totalTasks = allUsers.reduce((sum, user) => sum + user.tasksCompleted, 0);

    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-purple-800 to-indigo-900">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Header */}
          <div className="flex justify-between items-center mb-8">
            <div>
              <h1 className="text-3xl font-bold text-white">Admin Dashboard</h1>
              <p className="text-white text-opacity-70">Glass Slipper Platform Overview</p>
            </div>
            <button
              onClick={() => setIsAuthenticated(false)}
              className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition-all flex items-center space-x-2"
            >
              <LogOut className="w-4 h-4" />
              <span>Logout</span>
            </button>
          </div>

          {/* Stats Overview */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-white text-opacity-70 text-sm">Total Users</p>
                  <p className="text-3xl font-bold text-white">{totalUsers}</p>
                </div>
                <Users className="w-8 h-8 text-blue-400" />
              </div>
            </div>

            <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-white text-opacity-70 text-sm">Active Users</p>
                  <p className="text-3xl font-bold text-white">{activeUsers}</p>
                </div>
                <UserCheck className="w-8 h-8 text-green-400" />
              </div>
            </div>

            <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-white text-opacity-70 text-sm">Total Contacts</p>
                  <p className="text-3xl font-bold text-white">{totalContacts.toLocaleString()}</p>
                </div>
                <Target className="w-8 h-8 text-purple-400" />
              </div>
            </div>

            <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-white text-opacity-70 text-sm">Tasks Completed</p>
                  <p className="text-3xl font-bold text-white">{totalTasks}</p>
                </div>
                <CheckCircle className="w-8 h-8 text-yellow-400" />
              </div>
            </div>
          </div>

          {/* Detailed Analytics */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* User Engagement Chart */}
            <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-6">
              <h3 className="text-lg font-semibold text-white mb-4">User Engagement</h3>
              <div className="bg-white bg-opacity-10 rounded-xl p-4">
                <div className="text-center">
                  <div className="text-4xl font-bold text-green-400 mb-2">
                    {Math.round((activeUsers / totalUsers) * 100)}%
                  </div>
                  <p className="text-white text-opacity-70">Active User Rate</p>
                </div>
              </div>
            </div>

            <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-6">
              <h3 className="text-lg font-semibold text-white mb-4">Platform Health</h3>
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <span className="text-white text-opacity-70">API Response Time</span>
                  <span className="text-green-400 font-medium">245ms</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-white text-opacity-70">System Uptime</span>
                  <span className="text-green-400 font-medium">99.8%</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-white text-opacity-70">AI Categorisation Accuracy</span>
                  <span className="text-green-400 font-medium">87.2%</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-white text-opacity-70">Storage Usage</span>
                  <span className="text-yellow-400 font-medium">65% (3.2GB)</span>
                </div>
              </div>
            </div>
          </div>

          <div className="mt-8">
            <h3 className="text-lg font-semibold text-white mb-4">User Activity Summary</h3>
            <div className="space-y-3">
              {allUsers.map(user => (
                <div key={user.id} className="bg-white bg-opacity-10 rounded-xl p-4">
                  <div className="flex justify-between items-center">
                    <div>
                      <p className="text-white font-medium">{user.name}</p>
                      <p className="text-white text-opacity-70 text-sm">{user.company}</p>
                    </div>
                    <div className="text-right">
                      <p className="text-yellow-400 font-medium">{user.contactsUploaded} contacts</p>
                      <p className="text-green-400 text-sm">{user.tasksCompleted} tasks completed</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Dashboard component
  const Dashboard = () => {
    // User account state (initialized from localStorage and login)
    const [user, setUser] = useState(() => {
      const savedUser = StorageManager.load(STORAGE_KEYS.USER_DATA);
      return savedUser || currentUser || {
        name: '',
        company: '',
        businessType: '',
        targetClients: '',
        goals: ''
      };
    });

    // Initialize contacts state from localStorage
    const [contacts, setContacts] = useState(() => {
      return StorageManager.load(STORAGE_KEYS.CONTACTS, []);
    });

    const [categories, setCategories] = useState(() => {
      return StorageManager.load(STORAGE_KEYS.CATEGORIES, [
        { id: 1, name: 'Hot Prospect', color: 'bg-red-500', count: 0 },
        { id: 2, name: 'Warm Lead', color: 'bg-orange-500', count: 0 },
        { id: 3, name: 'Future Opportunity', color: 'bg-yellow-500', count: 0 },
        { id: 4, name: 'Network Contact', color: 'bg-blue-500', count: 0 },
        { id: 5, name: 'No Match', color: 'bg-gray-500', count: 0 }
      ]);
    });

    const [tasks, setTasks] = useState(() => {
      return StorageManager.load(STORAGE_KEYS.TASKS, []);
    });

    const [currentView, setCurrentView] = useState('dashboard');
    const [selectedContact, setSelectedContact] = useState(null);
    const [isAiCategorising, setIsAiCategorising] = useState(false);
    const [aiProgress, setAiProgress] = useState({ current: 0, total: 0 });
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedCategory, setSelectedCategory] = useState('all');
    const [bulkActionMode, setBulkActionMode] = useState(false);
    const [selectedContacts, setSelectedContacts] = useState(new Set());
    const [showMobileMenu, setShowMobileMenu] = useState(false);

    // File input ref for CSV upload
    const fileInputRef = useRef(null);

    // Debounced save functions
    const debouncedSaveContacts = useDebounceCallback((contactsData) => {
      StorageManager.save(STORAGE_KEYS.CONTACTS, contactsData);
    }, 500);

    const debouncedSaveCategories = useDebounceCallback((categoriesData) => {
      StorageManager.save(STORAGE_KEYS.CATEGORIES, categoriesData);
    }, 500);

    const debouncedSaveTasks = useDebounceCallback((tasksData) => {
      StorageManager.save(STORAGE_KEYS.TASKS, tasksData);
    }, 500);

    const debouncedSaveUser = useDebounceCallback((userData) => {
      StorageManager.save(STORAGE_KEYS.USER_DATA, userData);
    }, 500);

    // Save data whenever state changes
    useEffect(() => {
      debouncedSaveContacts(contacts);
    }, [contacts, debouncedSaveContacts]);

    useEffect(() => {
      debouncedSaveCategories(categories);
    }, [categories, debouncedSaveCategories]);

    useEffect(() => {
      debouncedSaveTasks(tasks);
    }, [tasks, debouncedSaveTasks]);

    useEffect(() => {
      debouncedSaveUser(user);
    }, [user, debouncedSaveUser]);

    // Update category counts when contacts change
    useEffect(() => {
      const updatedCategories = categories.map(category => ({
        ...category,
        count: contacts.filter(contact => contact.category === category.name).length
      }));
      setCategories(updatedCategories);
    }, [contacts]);

    // Handle logout
    const handleLogout = () => {
      if (window.confirm('Are you sure you want to sign out?')) {
        StorageManager.clear();
        setIsAuthenticated(false);
        setCurrentUser(null);
      }
    };

    // CSV parsing function
    const parseCSV = (csvText) => {
      const lines = csvText.trim().split('\n');
      if (lines.length < 2) return [];

      const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
      const contacts = [];

      for (let i = 1; i < lines.length; i++) {
        const values = [];
        let current = '';
        let inQuotes = false;

        for (let j = 0; j < lines[i].length; j++) {
          const char = lines[i][j];
          if (char === '"') {
            inQuotes = !inQuotes;
          } else if (char === ',' && !inQuotes) {
            values.push(current.trim());
            current = '';
          } else {
            current += char;
          }
        }
        values.push(current.trim());

        if (values.length >= headers.length) {
          const contact = {
            id: Date.now() + Math.random(),
            createdAt: new Date(),
            category: 'Uncategorised',
            aiAnalysis: null
          };

          headers.forEach((header, index) => {
            const value = values[index] ? values[index].replace(/"/g, '') : '';
            const lowerHeader = header.toLowerCase();

            if (lowerHeader.includes('first') && lowerHeader.includes('name')) {
              contact.firstName = value;
            } else if (lowerHeader.includes('last') && lowerHeader.includes('name')) {
              contact.lastName = value;
            } else if (lowerHeader.includes('email')) {
              contact.email = value;
            } else if (lowerHeader.includes('company')) {
              contact.company = value;
            } else if (lowerHeader.includes('position') || lowerHeader.includes('title') || lowerHeader.includes('job')) {
              contact.position = value;
            } else if (lowerHeader.includes('industry')) {
              contact.industry = value;
            } else if (lowerHeader.includes('location')) {
              contact.location = value;
            } else if (lowerHeader.includes('phone')) {
              contact.phone = value;
            } else if (lowerHeader.includes('linkedin')) {
              contact.linkedinUrl = value;
            } else {
              contact[header] = value;
            }
          });

          if (contact.firstName || contact.lastName || contact.email) {
            contacts.push(contact);
          }
        }
      }

      return contacts;
    };

    // Handle CSV file upload
    const handleFileUpload = async (event) => {
      const file = event.target.files[0];
      if (!file) return;

      if (!file.name.endsWith('.csv')) {
        alert('Please upload a CSV file.');
        return;
      }

      try {
        const text = await file.text();
        const newContacts = parseCSV(text);

        if (newContacts.length === 0) {
          alert('No valid contacts found in the CSV file. Please check the format.');
          return;
        }

        const existingEmails = new Set(contacts.map(c => c.email?.toLowerCase()));
        const uniqueContacts = newContacts.filter(c =>
          c.email && !existingEmails.has(c.email.toLowerCase())
        );

        if (uniqueContacts.length === 0) {
          alert('All contacts in this file already exist in your database.');
          return;
        }

        setContacts(prev => [...prev, ...uniqueContacts]);
        alert(`Successfully imported ${uniqueContacts.length} new contacts!`);

        // Reset file input
        if (fileInputRef.current) {
          fileInputRef.current.value = '';
        }
      } catch (error) {
        console.error('Error parsing CSV:', error);
        alert('Error reading the CSV file. Please check the format and try again.');
      }
    };

    // Categorise single contact with AI
    const categoriseContactWithAI = async (contact) => {
      try {
        const businessContext = `
Company: ${user.company}
Business Type: ${user.businessType}
Target Clients: ${user.targetClients || 'Not specified'}
Business Goals: ${user.goals || 'Not specified'}
`;

        const analysis = await linkedinAI.categoriseContact(contact, businessContext);

        const updatedContact = {
          ...contact,
          category: analysis.category,
          aiAnalysis: analysis,
          lastAnalysed: new Date()
        };

        setContacts(prev => prev.map(c =>
          c.id === contact.id ? updatedContact : c
        ));

        return updatedContact;
      } catch (error) {
        console.error('AI categorisation failed:', error);
        alert('AI categorisation failed. Please check your API configuration.');
        return contact;
      }
    };

    // Categorise all uncategorised contacts with AI
    const categoriseAllWithAI = async () => {
      const uncategorised = contacts.filter(c => c.category === 'Uncategorised');

      if (uncategorised.length === 0) {
        alert('No uncategorised contacts found.');
        return;
      }

      if (!window.confirm(`This will categorise ${uncategorised.length} contacts using AI. Continue?`)) {
        return;
      }

      setIsAiCategorising(true);
      setAiProgress({ current: 0, total: uncategorised.length });

      try {
        const businessContext = `
Company: ${user.company}
Business Type: ${user.businessType}
Target Clients: ${user.targetClients || 'Not specified'}
Business Goals: ${user.goals || 'Not specified'}
`;

        for (let i = 0; i < uncategorised.length; i++) {
          const contact = uncategorised[i];
          setAiProgress({ current: i + 1, total: uncategorised.length });

          try {
            const analysis = await linkedinAI.categoriseContact(contact, businessContext);

            setContacts(prev => prev.map(c =>
              c.id === contact.id ? {
                ...c,
                category: analysis.category,
                aiAnalysis: analysis,
                lastAnalysed: new Date()
              } : c
            ));

            // Add delay between requests to avoid rate limiting
            await new Promise(resolve => setTimeout(resolve, 1000));
          } catch (error) {
            console.error(`Failed to categorise contact ${contact.id}:`, error);
            // Continue with next contact
          }
        }

        alert('AI categorisation completed!');
      } catch (error) {
        console.error('Batch categorisation failed:', error);
        alert('AI categorisation failed. Please check your API configuration.');
      } finally {
        setIsAiCategorising(false);
        setAiProgress({ current: 0, total: 0 });
      }
    };

    // Export contacts to CSV
    const exportContacts = () => {
      const headers = ['First Name', 'Last Name', 'Email', 'Company', 'Position', 'Industry', 'Location', 'Category', 'AI Confidence', 'Next Action'];

      const csvContent = [
        headers.join(','),
        ...contacts.map(contact => [
          contact.firstName || '',
          contact.lastName || '',
          contact.email || '',
          contact.company || '',
          contact.position || '',
          contact.industry || '',
          contact.location || '',
          contact.category || '',
          contact.aiAnalysis?.confidence || '',
          contact.aiAnalysis?.nextAction || ''
        ].map(field => `"${field}"`).join(','))
      ].join('\n');

      const blob = new Blob([csvContent], { type: 'text/csv' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `glass-slipper-contacts-${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    };

    // Filter contacts based on search and category
    const filteredContacts = contacts.filter(contact => {
      const matchesSearch = !searchTerm ||
        `${contact.firstName} ${contact.lastName} ${contact.email} ${contact.company}`
          .toLowerCase().includes(searchTerm.toLowerCase());

      const matchesCategory = selectedCategory === 'all' || contact.category === selectedCategory;

      return matchesSearch && matchesCategory;
    });

    // Calculate statistics
    const totalContacts = contacts.length;
    const categorisedContacts = contacts.filter(c => c.category !== 'Uncategorised').length;
    const uncategorisedContacts = totalContacts - categorisedContacts;
    const hotProspects = contacts.filter(c => c.category === 'Hot Prospect').length;

    // Contact card component
    const ContactCard = ({ contact, onEdit, onCategorise }) => (
      <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-6 hover:bg-opacity-15 transition-all">
        <div className="flex justify-between items-start mb-4">
          <div className="flex-1">
            <h3 className="text-lg font-semibold text-white">
              {contact.firstName} {contact.lastName}
            </h3>
            <p className="text-white text-opacity-70">{contact.email}</p>
            <p className="text-white text-opacity-60 text-sm">{contact.company}</p>
            {contact.position && (
              <p className="text-white text-opacity-60 text-sm">{contact.position}</p>
            )}
          </div>
          <div className="flex items-center space-x-2">
            {contact.category !== 'Uncategorised' && (
              <span className={`px-3 py-1 rounded-full text-xs font-medium text-white ${
                categories.find(c => c.name === contact.category)?.color || 'bg-gray-500'
              }`}>
                {contact.category}
              </span>
            )}
            {bulkActionMode && (
              <input
                type="checkbox"
                checked={selectedContacts.has(contact.id)}
                onChange={(e) => {
                  const newSelected = new Set(selectedContacts);
                  if (e.target.checked) {
                    newSelected.add(contact.id);
                  } else {
                    newSelected.delete(contact.id);
                  }
                  setSelectedContacts(newSelected);
                }}
                className="w-4 h-4 text-blue-600 rounded"
              />
            )}
          </div>
        </div>

        {contact.aiAnalysis && (
          <div className="mb-4 p-3 bg-white bg-opacity-10 rounded-lg">
            <div className="flex justify-between items-center mb-2">
              <span className="text-yellow-400 text-sm font-medium">AI Analysis</span>
              <span className="text-green-400 text-sm">{contact.aiAnalysis.confidence}% confidence</span>
            </div>
            <p className="text-white text-opacity-80 text-sm mb-2">{contact.aiAnalysis.reasoning}</p>
            <p className="text-blue-300 text-sm">
              <strong>Next Action:</strong> {contact.aiAnalysis.nextAction}
            </p>
          </div>
        )}

        <div className="flex space-x-2">
          <button
            onClick={() => onEdit(contact)}
            className="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-all text-sm"
          >
            View Details
          </button>
          {contact.category === 'Uncategorised' && (
            <button
              onClick={() => onCategorise(contact)}
              className="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg transition-all text-sm flex items-center space-x-1"
            >
              <Sparkles className="w-4 h-4" />
              <span>AI Categorise</span>
            </button>
          )}
        </div>
      </div>
    );

    // Profile settings component
    const ProfileSettings = () => {
      const [profileData, setProfileData] = useState(user);
      const [isSaving, setIsSaving] = useState(false);

      const handleSave = async () => {
        setIsSaving(true);
        await new Promise(resolve => setTimeout(resolve, 1000));
        setUser(profileData);
        setIsSaving(false);
        alert('Profile updated successfully!');
      };

      return (
        <div className="max-w-2xl mx-auto">
          <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-8">
            <div className="flex items-center space-x-4 mb-8">
              <div className="bg-white bg-opacity-10 p-3 rounded-full">
                <User className="w-8 h-8 text-yellow-400" />
              </div>
              <div>
                <h2 className="text-2xl font-bold text-white">Profile Settings</h2>
                <p className="text-white text-opacity-70">Update your account information and business details</p>
              </div>
            </div>

            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-white text-sm font-medium mb-2">Name</label>
                  <input
                    type="text"
                    value={profileData.name}
                    onChange={(e) => setProfileData(prev => ({ ...prev, name: e.target.value }))}
                    className="w-full px-4 py-3 bg-white bg-opacity-10 backdrop-blur border border-white border-opacity-20 rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-2 focus:ring-yellow-400"
                  />
                </div>

                <div>
                  <label className="block text-white text-sm font-medium mb-2">Email</label>
                  <input
                    type="email"
                    value={profileData.email}
                    onChange={(e) => setProfileData(prev => ({ ...prev, email: e.target.value }))}
                    className="w-full px-4 py-3 bg-white bg-opacity-10 backdrop-blur border border-white border-opacity-20 rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-2 focus:ring-yellow-400"
                  />
                </div>
              </div>

              <div>
                <label className="block text-white text-sm font-medium mb-2">Company</label>
                <input
                  type="text"
                  value={profileData.company}
                  onChange={(e) => setProfileData(prev => ({ ...prev, company: e.target.value }))}
                  className="w-full px-4 py-3 bg-white bg-opacity-10 backdrop-blur border border-white border-opacity-20 rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-2 focus:ring-yellow-400"
                />
              </div>

              <div>
                <label className="block text-white text-sm font-medium mb-2">Business Type</label>
                <input
                  type="text"
                  value={profileData.businessType}
                  onChange={(e) => setProfileData(prev => ({ ...prev, businessType: e.target.value }))}
                  className="w-full px-4 py-3 bg-white bg-opacity-10 backdrop-blur border border-white border-opacity-20 rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-2 focus:ring-yellow-400"
                />
              </div>

              <div>
                <label className="block text-white text-sm font-medium mb-2">Target Clients</label>
                <textarea
                  value={profileData.targetClients || ''}
                  onChange={(e) => setProfileData(prev => ({ ...prev, targetClients: e.target.value }))}
                  rows="3"
                  className="w-full px-4 py-3 bg-white bg-opacity-10 backdrop-blur border border-white border-opacity-20 rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-2 focus:ring-yellow-400"
                  placeholder="Describe your ideal target clients..."
                />
              </div>

              <div>
                <label className="block text-white text-sm font-medium mb-2">Business Goals</label>
                <textarea
                  value={profileData.goals || ''}
                  onChange={(e) => setProfileData(prev => ({ ...prev, goals: e.target.value }))}
                  rows="3"
                  className="w-full px-4 py-3 bg-white bg-opacity-10 backdrop-blur border border-white border-opacity-20 rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-2 focus:ring-yellow-400"
                  placeholder="What are your main business objectives?"
                />
              </div>

              <button
                onClick={handleSave}
                disabled={isSaving}
                className="w-full bg-gradient-to-r from-yellow-400 to-orange-500 text-black py-3 rounded-lg font-semibold hover:from-yellow-300 hover:to-orange-400 transition-all disabled:opacity-50 flex items-center justify-center space-x-2"
              >
                {isSaving ? (
                  <>
                    <div className="w-5 h-5 border-2 border-purple-900 border-t-transparent rounded-full animate-spin"></div>
                    <span>Saving...</span>
                  </>
                ) : (
                  <>
                    <CheckCircle className="w-5 h-5" />
                    <span>Save Changes</span>
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      );
    };

    // Check for admin access (demo: admin@glassslipper.com)
    if (currentUser?.email === 'admin@glassslipper.com') {
      return <AdminPanel />;
    }

    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-purple-800 to-indigo-900">
        {/* Header */}
        <div className="border-b border-white border-opacity-10">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-4">
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-2">
                  <Sparkles className="w-8 h-8 text-yellow-400" />
                  <h1 className="text-2xl font-bold text-white">Glass Slipper</h1>
                </div>

                {/* Desktop Navigation */}
                <nav className="hidden md:flex space-x-6 ml-8">
                  <button
                    onClick={() => setCurrentView('dashboard')}
                    className={`px-4 py-2 rounded-lg transition-all ${
                      currentView === 'dashboard'
                        ? 'bg-white bg-opacity-20 text-white'
                        : 'text-white text-opacity-70 hover:text-white hover:bg-white hover:bg-opacity-10'
                    }`}
                  >
                    Dashboard
                  </button>
                  <button
                    onClick={() => setCurrentView('contacts')}
                    className={`px-4 py-2 rounded-lg transition-all ${
                      currentView === 'contacts'
                        ? 'bg-white bg-opacity-20 text-white'
                        : 'text-white text-opacity-70 hover:text-white hover:bg-white hover:bg-opacity-10'
                    }`}
                  >
                    Contacts
                  </button>
                  <button
                    onClick={() => setCurrentView('tasks')}
                    className={`px-4 py-2 rounded-lg transition-all ${
                      currentView === 'tasks'
                        ? 'bg-white bg-opacity-20 text-white'
                        : 'text-white text-opacity-70 hover:text-white hover:bg-white hover:bg-opacity-10'
                    }`}
                  >
                    Tasks
                  </button>
                  <button
                    onClick={() => setCurrentView('settings')}
                    className={`px-4 py-2 rounded-lg transition-all ${
                      currentView === 'settings'
                        ? 'bg-white bg-opacity-20 text-white'
                        : 'text-white text-opacity-70 hover:text-white hover:bg-white hover:bg-opacity-10'
                    }`}
                  >
                    Settings
                  </button>
                </nav>
              </div>

              <div className="flex items-center space-x-4">
                <span className="text-white text-opacity-70 text-sm hidden md:block">
                  Welcome, {user.name || 'User'}
                </span>

                {/* Mobile menu button */}
                <button
                  onClick={() => setShowMobileMenu(!showMobileMenu)}
                  className="md:hidden text-white"
                >
                  <Menu className="w-6 h-6" />
                </button>

                <button
                  onClick={handleLogout}
                  className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition-all flex items-center space-x-2"
                >
                  <LogOut className="w-4 h-4" />
                  <span className="hidden md:inline">Logout</span>
                </button>
              </div>
            </div>

            {/* Mobile Navigation */}
            {showMobileMenu && (
              <div className="md:hidden py-4 border-t border-white border-opacity-10">
                <div className="space-y-2">
                  <button
                    onClick={() => { setCurrentView('dashboard'); setShowMobileMenu(false); }}
                    className={`block w-full text-left px-4 py-2 rounded-lg transition-all ${
                      currentView === 'dashboard'
                        ? 'bg-white bg-opacity-20 text-white'
                        : 'text-white text-opacity-70'
                    }`}
                  >
                    Dashboard
                  </button>
                  <button
                    onClick={() => { setCurrentView('contacts'); setShowMobileMenu(false); }}
                    className={`block w-full text-left px-4 py-2 rounded-lg transition-all ${
                      currentView === 'contacts'
                        ? 'bg-white bg-opacity-20 text-white'
                        : 'text-white text-opacity-70'
                    }`}
                  >
                    Contacts
                  </button>
                  <button
                    onClick={() => { setCurrentView('tasks'); setShowMobileMenu(false); }}
                    className={`block w-full text-left px-4 py-2 rounded-lg transition-all ${
                      currentView === 'tasks'
                        ? 'bg-white bg-opacity-20 text-white'
                        : 'text-white text-opacity-70'
                    }`}
                  >
                    Tasks
                  </button>
                  <button
                    onClick={() => { setCurrentView('settings'); setShowMobileMenu(false); }}
                    className={`block w-full text-left px-4 py-2 rounded-lg transition-all ${
                      currentView === 'settings'
                        ? 'bg-white bg-opacity-20 text-white'
                        : 'text-white text-opacity-70'
                    }`}
                  >
                    Settings
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Main Content */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Dashboard View */}
          {currentView === 'dashboard' && (
            <div className="space-y-8">
              {/* Stats Overview */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-white text-opacity-70 text-sm">Total Contacts</p>
                      <p className="text-3xl font-bold text-white">{totalContacts}</p>
                    </div>
                    <Users className="w-8 h-8 text-blue-400" />
                  </div>
                </div>

                <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-white text-opacity-70 text-sm">Hot Prospects</p>
                      <p className="text-3xl font-bold text-white">{hotProspects}</p>
                    </div>
                    <Target className="w-8 h-8 text-red-400" />
                  </div>
                </div>

                <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-white text-opacity-70 text-sm">Categorised</p>
                      <p className="text-3xl font-bold text-white">{categorisedContacts}</p>
                    </div>
                    <CheckCircle className="w-8 h-8 text-green-400" />
                  </div>
                </div>

                <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-white text-opacity-70 text-sm">Pending Tasks</p>
                      <p className="text-3xl font-bold text-white">{tasks.filter(t => !t.completed).length}</p>
                    </div>
                    <Calendar className="w-8 h-8 text-yellow-400" />
                  </div>
                </div>
              </div>

              {/* Quick Actions */}
              <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-6">
                <h3 className="text-xl font-semibold text-white mb-6">Quick Actions</h3>

                {/* Hidden file input */}
                <input
                  type="file"
                  ref={fileInputRef}
                  onChange={handleFileUpload}
                  accept=".csv"
                  className="hidden"
                />

                {uncategorisedContacts > 0 && (
                  <div className="bg-yellow-500 bg-opacity-20 border border-yellow-500 rounded-lg p-4 mb-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <h4 className="text-yellow-400 font-medium">Uncategorised Contacts Found</h4>
                        <p className="text-white text-opacity-70 text-sm">
                          {uncategorisedContacts} contacts need AI categorisation
                        </p>
                      </div>
                      <button
                        onClick={categoriseAllWithAI}
                        disabled={isAiCategorising}
                        className="bg-gradient-to-r from-yellow-500 to-orange-500 text-white px-6 py-3 rounded-xl font-semibold hover:from-yellow-600 hover:to-orange-600 transition-all flex items-center space-x-2 disabled:opacity-50"
                      >
                        <Sparkles className="w-5 h-5" />
                        <span>
                          {isAiCategorising
                            ? `AI Categorising... (${aiProgress.current}/${aiProgress.total})`
                            : `Categorise All with AI`
                          }
                        </span>
                      </button>
                    </div>
                  </div>
                )}

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <button
                    onClick={() => {
                      if (fileInputRef.current) {
                        fileInputRef.current.click();
                      }
                    }}
                    className="bg-gradient-to-r from-purple-500 to-pink-500 text-white p-6 rounded-xl font-semibold hover:from-purple-600 hover:to-pink-600 transition-all flex items-center justify-center space-x-2"
                  >
                    <Upload className="w-6 h-6" />
                    <span>Upload CSV</span>
                  </button>

                  <button
                    onClick={() => setCurrentView('contacts')}
                    className="bg-gradient-to-r from-blue-500 to-purple-500 text-white p-6 rounded-xl font-semibold hover:from-blue-600 hover:to-purple-600 transition-all flex items-center justify-center space-x-2"
                  >
                    <Users className="w-6 h-6" />
                    <span>View Contacts</span>
                  </button>

                  <button
                    onClick={exportContacts}
                    className="bg-gradient-to-r from-green-500 to-teal-500 text-white p-6 rounded-xl font-semibold hover:from-green-600 hover:to-teal-600 transition-all flex items-center justify-center space-x-2"
                  >
                    <FileText className="w-6 h-6" />
                    <span>Export Data</span>
                  </button>
                </div>
              </div>

              {/* Categories Overview */}
              <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-6">
                <h3 className="text-xl font-semibold text-white mb-6">Contact Categories</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                  {categories.map(category => (
                    <div
                      key={category.id}
                      className="bg-white bg-opacity-10 rounded-xl p-4 text-center hover:bg-opacity-15 transition-all cursor-pointer"
                      onClick={() => {
                        setSelectedCategory(category.name);
                        setCurrentView('contacts');
                      }}
                    >
                      <div className={`w-12 h-12 ${category.color} rounded-full mx-auto mb-3 flex items-center justify-center`}>
                        <span className="text-white font-bold text-lg">{category.count}</span>
                      </div>
                      <h4 className="text-white font-medium text-sm">{category.name}</h4>
                    </div>
                  ))}
                </div>
              </div>

              {/* Recent Activity */}
              {contacts.length > 0 && (
                <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-6">
                  <h3 className="text-xl font-semibold text-white mb-6">Recent Contacts</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {contacts.slice(-6).reverse().map(contact => (
                      <ContactCard
                        key={contact.id}
                        contact={contact}
                        onEdit={(contact) => {
                          setSelectedContact(contact);
                          setCurrentView('contacts');
                        }}
                        onCategorise={categoriseContactWithAI}
                      />
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Contacts View */}
          {currentView === 'contacts' && (
            <div className="space-y-6">
              {/* Contacts Header */}
              <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
                <div>
                  <h2 className="text-2xl font-bold text-white">Contact Management</h2>
                  <p className="text-white text-opacity-70">
                    {filteredContacts.length} of {totalContacts} contacts
                  </p>
                </div>

                {/* Hidden file input */}
                <input
                  type="file"
                  ref={fileInputRef}
                  onChange={handleFileUpload}
                  accept=".csv"
                  className="hidden"
                />

                {/* Contact Actions */}
                <div className="flex flex-col sm:flex-row gap-3">
                  <button
                    onClick={() => {
                      if (fileInputRef.current) {
                        fileInputRef.current.click();
                      }
                    }}
                    className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-6 py-3 rounded-xl font-semibold hover:from-purple-600 hover:to-pink-600 transition-all flex items-center justify-center space-x-2"
                  >
                    <Upload className="w-5 h-5" />
                    <span>Upload CSV</span>
                  </button>

                  {uncategorisedContacts > 0 && (
                    <button
                      onClick={categoriseAllWithAI}
                      disabled={isAiCategorising}
                      className="bg-gradient-to-r from-yellow-500 to-orange-500 text-white px-6 py-3 rounded-xl font-semibold hover:from-yellow-600 hover:to-orange-600 transition-all flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      <Sparkles className="w-5 h-5" />
                      <span>
                        {isAiCategorising
                          ? `AI Categorising... (${aiProgress.current}/${aiProgress.total})`
                          : `AI Categorise All (${uncategorisedContacts})`
                        }
                      </span>
                    </button>
                  )}

                  <button
                    onClick={exportContacts}
                    className="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-xl font-semibold transition-all flex items-center justify-center space-x-2"
                  >
                    <FileText className="w-5 h-5" />
                    <span>Export CSV</span>
                  </button>

                  {!bulkActionMode ? (
                    <button
                      onClick={() => setBulkActionMode(true)}
                      className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-xl font-semibold transition-all"
                    >
                      Bulk Actions
                    </button>
                  ) : (
                    <button
                      onClick={() => {
                        setBulkActionMode(false);
                        setSelectedContacts(new Set());
                      }}
                      className="bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-xl font-semibold transition-all"
                    >
                      Cancel
                    </button>
                  )}
                </div>
              </div>

              {/* Bulk Actions Bar */}
              {bulkActionMode && selectedContacts.size > 0 && (
                <div className="bg-blue-500 bg-opacity-20 border border-blue-500 rounded-xl p-4">
                  <div className="flex items-center justify-between">
                    <span className="text-blue-300">
                      {selectedContacts.size} contact{selectedContacts.size > 1 ? 's' : ''} selected
                    </span>
                    <div className="flex space-x-3">
                      <button
                        onClick={() => {
                          const selectedContactObjects = contacts.filter(c => selectedContacts.has(c.id));
                          selectedContactObjects.forEach(contact => {
                            if (contact.category === 'Uncategorised') {
                              categoriseContactWithAI(contact);
                            }
                          });
                          setSelectedContacts(new Set());
                        }}
                        className="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg transition-all"
                      >
                        Categorise Selected
                      </button>
                      <button
                        onClick={() => {
                          if (window.confirm(`Delete ${selectedContacts.size} selected contacts?`)) {
                            setContacts(prev => prev.filter(c => !selectedContacts.has(c.id)));
                            setSelectedContacts(new Set());
                          }
                        }}
                        className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition-all"
                      >
                        Delete Selected
                      </button>
                    </div>
                  </div>
                </div>
              )}

              {/* Search and Filter */}
              <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-6">
                <div className="flex flex-col lg:flex-row space-y-4 lg:space-y-0 lg:space-x-4">
                  <div className="flex-1">
                    <input
                      type="text"
                      placeholder="Search contacts..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="w-full px-4 py-3 bg-white bg-opacity-10 backdrop-blur border border-white border-opacity-20 rounded-lg text-white placeholder-white placeholder-opacity-50 focus:outline-none focus:ring-2 focus:ring-yellow-400"
                    />
                  </div>

                  <div className="lg:w-48">
                    <select
                      value={selectedCategory}
                      onChange={(e) => setSelectedCategory(e.target.value)}
                      className="w-full px-4 py-3 bg-white bg-opacity-10 backdrop-blur border border-white border-opacity-20 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-yellow-400"
                    >
                      <option value="all" className="bg-purple-900">All Categories</option>
                      <option value="Uncategorised" className="bg-purple-900">Uncategorised</option>
                      {categories.map(category => (
                        <option key={category.id} value={category.name} className="bg-purple-900">
                          {category.name} ({category.count})
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>

              {/* Contacts Grid */}
              {filteredContacts.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {filteredContacts.map(contact => (
                    <ContactCard
                      key={contact.id}
                      contact={contact}
                      onEdit={setSelectedContact}
                      onCategorise={categoriseContactWithAI}
                    />
                  ))}
                </div>
              ) : (
                <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-12 text-center">
                  <Users className="w-16 h-16 text-white text-opacity-30 mx-auto mb-4" />
                  <h3 className="text-xl font-semibold text-white mb-2">No Contacts Found</h3>
                  <p className="text-white text-opacity-70 mb-6">
                    {contacts.length === 0
                      ? "Upload your first CSV file to get started"
                      : "No contacts match your current search criteria"
                    }
                  </p>
                  {contacts.length === 0 && (
                    <button
                      onClick={() => {
                        if (fileInputRef.current) {
                          fileInputRef.current.click();
                        }
                      }}
                      className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-6 py-3 rounded-xl font-semibold hover:from-purple-600 hover:to-pink-600 transition-all flex items-center justify-center space-x-2 mx-auto"
                    >
                      <Upload className="w-5 h-5" />
                      <span>Upload CSV File</span>
                    </button>
                  )}
                </div>
              )}
            </div>
          )}

          {/* Tasks View */}
          {currentView === 'tasks' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <div>
                  <h2 className="text-2xl font-bold text-white">Task Management</h2>
                  <p className="text-white text-opacity-70">
                    {tasks.filter(t => !t.completed).length} pending tasks
                  </p>
                </div>
                <button
                  onClick={() => {
                    const newTask = {
                      id: Date.now(),
                      title: '',
                      description: '',
                      dueDate: '',
                      completed: false,
                      createdAt: new Date()
                    };
                    setTasks(prev => [newTask, ...prev]);
                  }}
                  className="bg-gradient-to-r from-green-500 to-teal-500 text-white px-6 py-3 rounded-xl font-semibold hover:from-green-600 hover:to-teal-600 transition-all flex items-center space-x-2"
                >
                  <Plus className="w-5 h-5" />
                  <span>Add Task</span>
                </button>
              </div>

              {/* Tasks List */}
              <div className="space-y-4">
                {tasks.length > 0 ? (
                  tasks.map(task => (
                    <div
                      key={task.id}
                      className={`bg-white bg-opacity-10 backdrop-blur rounded-xl p-6 ${
                        task.completed ? 'opacity-60' : ''
                      }`}
                    >
                      <div className="flex items-start space-x-4">
                        <input
                          type="checkbox"
                          checked={task.completed}
                          onChange={(e) => {
                            setTasks(prev => prev.map(t =>
                              t.id === task.id ? { ...t, completed: e.target.checked } : t
                            ));
                          }}
                          className="mt-1 w-5 h-5 text-green-600 rounded"
                        />
                        <div className="flex-1">
                          <input
                            type="text"
                            value={task.title}
                            onChange={(e) => {
                              setTasks(prev => prev.map(t =>
                                t.id === task.id ? { ...t, title: e.target.value } : t
                              ));
                            }}
                            placeholder="Task title..."
                            className={`w-full bg-transparent text-white text-lg font-medium border-none outline-none placeholder-white placeholder-opacity-50 ${
                              task.completed ? 'line-through' : ''
                            }`}
                          />
                          <textarea
                            value={task.description}
                            onChange={(e) => {
                              setTasks(prev => prev.map(t =>
                                t.id === task.id ? { ...t, description: e.target.value } : t
                              ));
                            }}
                            placeholder="Task description..."
                            rows="2"
                            className="w-full bg-transparent text-white text-opacity-80 border-none outline-none placeholder-white placeholder-opacity-50 resize-none mt-2"
                          />
                          <div className="flex items-center space-x-4 mt-3">
                            <input
                              type="date"
                              value={task.dueDate}
                              onChange={(e) => {
                                setTasks(prev => prev.map(t =>
                                  t.id === task.id ? { ...t, dueDate: e.target.value } : t
                                ));
                              }}
                              className="bg-white bg-opacity-10 text-white text-sm px-3 py-1 rounded border border-white border-opacity-20"
                            />
                            <button
                              onClick={() => {
                                if (window.confirm('Delete this task?')) {
                                  setTasks(prev => prev.filter(t => t.id !== task.id));
                                }
                              }}
                              className="text-red-400 hover:text-red-300 text-sm"
                            >
                              Delete
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="bg-white bg-opacity-10 backdrop-blur rounded-xl p-12 text-center">
                    <Calendar className="w-16 h-16 text-white text-opacity-30 mx-auto mb-4" />
                    <h3 className="text-xl font-semibold text-white mb-2">No Tasks Yet</h3>
                    <p className="text-white text-opacity-70">
                      Create your first task to get organised
                    </p>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Settings View */}
          {currentView === 'settings' && <ProfileSettings />}

          {/* Contact Detail Modal */}
          {selectedContact && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
              <div className="bg-gradient-to-br from-purple-900 to-indigo-900 rounded-xl p-8 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                <div className="flex justify-between items-start mb-6">
                  <div>
                    <h3 className="text-2xl font-bold text-white">
                      {selectedContact.firstName} {selectedContact.lastName}
                    </h3>
                    <p className="text-white text-opacity-70">{selectedContact.company}</p>
                  </div>
                  <button
                    onClick={() => setSelectedContact(null)}
                    className="text-white text-opacity-70 hover:text-white"
                  >
                    ✕
                  </button>
                </div>

                <div className="space-y-6">
                  {/* Contact Info */}
                  <div className="bg-white bg-opacity-10 rounded-xl p-6">
                    <h4 className="text-lg font-semibold text-white mb-4">Contact Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-white text-opacity-70 text-sm mb-1">Email</label>
                        <p className="text-white">{selectedContact.email || 'Not provided'}</p>
                      </div>
                      <div>
                        <label className="block text-white text-opacity-70 text-sm mb-1">Phone</label>
                        <p className="text-white">{selectedContact.phone || 'Not provided'}</p>
                      </div>
                      <div>
                        <label className="block text-white text-opacity-70 text-sm mb-1">Position</label>
                        <p className="text-white">{selectedContact.position || 'Not provided'}</p>
                      </div>
                      <div>
                        <label className="block text-white text-opacity-70 text-sm mb-1">Industry</label>
                        <p className="text-white">{selectedContact.industry || 'Not provided'}</p>
                      </div>
                      <div>
                        <label className="block text-white text-opacity-70 text-sm mb-1">Location</label>
                        <p className="text-white">{selectedContact.location || 'Not provided'}</p>
                      </div>
                      <div>
                        <label className="block text-white text-opacity-70 text-sm mb-1">Category</label>
                        <span className={`inline-block px-3 py-1 rounded-full text-xs font-medium text-white ${
                          categories.find(c => c.name === selectedContact.category)?.color || 'bg-gray-500'
                        }`}>
                          {selectedContact.category}
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* AI Analysis */}
                  {selectedContact.aiAnalysis && (
                    <div className="bg-white bg-opacity-10 rounded-xl p-6">
                      <h4 className="text-lg font-semibold text-white mb-4">AI Analysis</h4>
                      <div className="space-y-4">
                        <div className="flex justify-between items-center">
                          <span className="text-white text-opacity-70">Confidence Score</span>
                          <span className="text-green-400 font-medium">
                            {selectedContact.aiAnalysis.confidence}%
                          </span>
                        </div>
                        <div>
                          <label className="block text-white text-opacity-70 text-sm mb-2">Reasoning</label>
                          <p className="text-white text-sm bg-white bg-opacity-10 p-3 rounded-lg">
                            {selectedContact.aiAnalysis.reasoning}
                          </p>
                        </div>
                        <div>
                          <label className="block text-white text-opacity-70 text-sm mb-2">Recommended Next Action</label>
                          <p className="text-blue-300 text-sm bg-white bg-opacity-10 p-3 rounded-lg">
                            {selectedContact.aiAnalysis.nextAction}
                          </p>
                        </div>
                        <div>
                          <label className="block text-white text-opacity-70 text-sm mb-2">Content Strategy</label>
                          <p className="text-purple-300 text-sm bg-white bg-opacity-10 p-3 rounded-lg">
                            {selectedContact.aiAnalysis.contentStrategy}
                          </p>
                        </div>
                        <div>
                          <label className="block text-white text-opacity-70 text-sm mb-2">Connection Value</label>
                          <p className="text-yellow-300 text-sm bg-white bg-opacity-10 p-3 rounded-lg">
                            {selectedContact.aiAnalysis.connectionValue}
                          </p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Actions */}
                  <div className="flex flex-col sm:flex-row gap-4">
                    {selectedContact.category === 'Uncategorised' && (
                      <button
                        onClick={async () => {
                          await categoriseContactWithAI(selectedContact);
                          setSelectedContact(prev => ({
                            ...prev,
                            ...contacts.find(c => c.id === prev.id)
                          }));
                        }}
                        className="bg-purple-500 hover:bg-purple-600 text-white px-6 py-3 rounded-lg transition-all flex items-center justify-center space-x-2"
                      >
                        <Sparkles className="w-5 h-5" />
                        <span>AI Categorise</span>
                      </button>
                    )}

                    <button
                      onClick={() => {
                        // Generate LinkedIn outreach message
                        linkedinAI.generateOutreachMessage(selectedContact, user)
                          .then(result => {
                            alert(`Suggested message:\n\n${result.message}`);
                          })
                          .catch(error => {
                            console.error('Message generation failed:', error);
                            alert('Failed to generate message. Please check your API configuration.');
                          });
                      }}
                      className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg transition-all flex items-center justify-center space-x-2"
                    >
                      <Mail className="w-5 h-5" />
                      <span>Generate Message</span>
                    </button>

                    <button
                      onClick={() => {
                        if (window.confirm('Delete this contact?')) {
                          setContacts(prev => prev.filter(c => c.id !== selectedContact.id));
                          setSelectedContact(null);
                        }
                      }}
                      className="bg-red-500 hover:bg-red-600 text-white px-6 py-3 rounded-lg transition-all flex items-center justify-center space-x-2"
                    >
                      <span>Delete Contact</span>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  // Main app render logic
  if (!isAuthenticated) {
    if (authView === 'landing') {
      return <LandingPage />;
    } else if (authView === 'signin') {
      return <SignInPage />;
    } else if (authView === 'signup') {
      return <SignUpPage />;
    } else {
      return <LandingPage />;
    }
  }

  return <Dashboard />;
};

export default GlassSlipperApp;